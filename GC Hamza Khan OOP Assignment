#include<iostream>
using namespace std;



struct node
{
	int data;
	node *next, *previous;
};



class list
{
private:

	node *head, *tail;

public:

	list();

	void createnode(int value);
	void display();
	void insert_start(int value);
	void insert_position(int value);
	void delete_first();
	void delete_last();
	void delete_position(int value);

	node *head = NULL;
	node *tail = NULL;
	node *new node = new node;
	new node->next = NULL;
	new node->previous = NULL;
	new node->data = value;

};







void list::createnode(int value)
{
	if (head == NULL)
	{
		head = new node;
		tail = new node;
	}
}



void list::display()
{
	for (node *temp = head; temp != NULL; temp = temp->next)
		cout << temp->data;
}



void list::insert_start(int value)
{
	if (value < start->data)
	{
		new node->next = head;
		head->previous = new node;
		head = new node;
	}
}



void list::insert_position(int value)
{
	for (node *i = head->next; i != -1; i = i->next)
	{
		if (value < i->data)
		{
			new node->next = i;
			new node->previous = i->previous;
			i->previous->next = new node;
			i->previous = new node;
		}
	}
}



void list::delete_first()
{
	if (value == head->data)
	{
		node *temp = head;
		head = head->next;
		head->previous = NULL;
		delete temp;
	}
}



void list::delete_last()
{
	if (value == tail->data)
	{
		node *temp = tail;
		tail->previous->next = NULL;
		tail = tail->previous;
		delete temp;
	}
}



void list::delete_position(int value)
{
	for (node *i = head->next; i != tail;i=i->next)
	if (value == i->data)
	{
		i->previous->next = i->next;
		i->next->previous = i->previous;
		delete i;
	}
}



int main()
{
	list obj;
	obj.createnode(25);
	obj.createnode(50);
	obj.createnode(90);
	obj.createnode(40);
	cout << "\n\n\tDISPLAYING ALL NODES\t\n\n";
	obj.display();
	cout << "\n\n\tINSERTING AT END\t\n\n";
	obj.createnode(55);
	obj.display();
	cout << "\n\n\tINSERTING AT START\t\n\n";
	obj.insert_start(50);
	obj.display();
	cout << "\n\n\tINSERTING AT PARTICULAR\t\n\n";
	obj.insert_position(60);
	obj.display();
	cout << "\n\n\tDELETING AT START\t\n\n";
	obj.delete_first();
	obj.display();
	cout << "\n\n\tDELETING AT END\t\n\n";
	obj.delete_last();
	obj.display();
	cout << "\n\n\tDELETING AT PARTICULAR\t\n\n";
	obj.delete_position(4);
	obj.display();
	system("pause");
	return 0;
}
